/* tslint:disable */
/* eslint-disable */
/**
 * Bitbucket Server
 * This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).
 *
 * The version of the OpenAPI document: 8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAll401Response,
  ListUpstreamServers200Response,
  RestClusterNode,
  RestErrors,
  RestMirroredRepository,
  RestSyncProgress,
  RestUpstreamServer,
  RestUpstreamSettings,
} from '../models';

interface GetFarmNodesRequest {
    upstreamId: string;
}

interface GetMirrorModeRequest {
    upstreamId: string;
}

interface GetMirrorSettingsRequest {
    upstreamId: string;
}

interface GetMirroredProjectsRequest {
    upstreamId: string;
}

interface GetMirroredRepositoryRequest {
    upstreamRepoId: string;
    upstreamId: string;
}

interface GetSynchronizationProgressRequest {
    upstreamId: string;
}

interface GetUpstreamServerRequest {
    upstreamId: string;
}

interface ListUpstreamServersRequest {
    start?: number;
    limit?: number;
}

interface OnAddonDisabledRequest {
    upstreamId: string;
}

interface OnAddonEnabledRequest {
    upstreamId: string;
}

interface SetMirrorModeRequest {
    upstreamId: string;
    body?: string;
}

interface SetMirrorSettingsRequest {
    upstreamId: string;
    restUpstreamSettings?: RestUpstreamSettings;
}

interface StartMirroringProjectRequest {
    upstreamId: string;
    projectId: string;
}

interface StartMirroringProjectsRequest {
    upstreamId: string;
    requestBody?: Array<string>;
}

interface StopMirroringProjectRequest {
    upstreamId: string;
    projectId: string;
}

interface StopMirroringProjectsRequest {
    upstreamId: string;
    requestBody?: Array<string>;
}

interface SynchronizeRepositoryWithUpstreamRequest {
    upstreamRepoId: string;
    upstreamId: string;
    level?: string;
}

interface SynchronizeWithUpstreamRequest {
    upstreamId: string;
    level?: string;
}

/**
 * 
 */
export class MirroringMirrorApi extends runtime.BaseAPI {

    /**
     * Retrieves the list of farm nodes in this cluster
     * Get farm nodes
     */
    async getFarmNodesRaw(requestParameters: GetFarmNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RestClusterNode>>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling getFarmNodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/farmNodes`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the list of farm nodes in this cluster
     * Get farm nodes
     */
    async getFarmNodes(requestParameters: GetFarmNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RestClusterNode>> {
        const response = await this.getFarmNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the current mirror mode for the specified upstream
     * Get mirror mode
     */
    async getMirrorModeRaw(requestParameters: GetMirrorModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling getMirrorMode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings/mode`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gets the current mirror mode for the specified upstream
     * Get mirror mode
     */
    async getMirrorMode(requestParameters: GetMirrorModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMirrorModeRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves upstream settings
     * Get upstream settings
     */
    async getMirrorSettingsRaw(requestParameters: GetMirrorSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestUpstreamSettings>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling getMirrorSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves upstream settings
     * Get upstream settings
     */
    async getMirrorSettings(requestParameters: GetMirrorSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestUpstreamSettings> {
        const response = await this.getMirrorSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the IDs of the projects that the mirror is configured to mirror
     * Get mirrored project IDs
     */
    async getMirroredProjectsRaw(requestParameters: GetMirroredProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling getMirroredProjects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings/projects`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the IDs of the projects that the mirror is configured to mirror
     * Get mirrored project IDs
     */
    async getMirroredProjects(requestParameters: GetMirroredProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMirroredProjectsRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all available clone urls for the specified repository.
     * Get clone URLs
     */
    async getMirroredRepositoryRaw(requestParameters: GetMirroredRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestMirroredRepository>> {
        if (requestParameters.upstreamRepoId === null || requestParameters.upstreamRepoId === undefined) {
            throw new runtime.RequiredError('upstreamRepoId','Required parameter requestParameters.upstreamRepoId was null or undefined when calling getMirroredRepository.');
        }

        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling getMirroredRepository.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/repos/{upstreamRepoId}`.replace(`{${"upstreamRepoId"}}`, encodeURIComponent(String(requestParameters.upstreamRepoId))).replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all available clone urls for the specified repository.
     * Get clone URLs
     */
    async getMirroredRepository(requestParameters: GetMirroredRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestMirroredRepository> {
        const response = await this.getMirroredRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Retrieves synchronization progress state for the specified upstream server.If there\'s no progress to report, this resource will return <pre><code> {\"discovering\":false,\"syncedRepos\":0,\"totalRepos\":0}</code></pre> If there are repositories in the process of synchronizing, but the precise number hasn\'t been discovered yet, this resource will return: <pre><code> {\"discovering\":true,\"syncedRepos\":3,\"totalRepos\":100}</code></pre> If there is progress to report and the total number of repositories is known, this resource will return: <pre> <code> {\"discovering\":false,\"syncedRepos\":242,\"totalRepos\":1071}</code> </pre>
     * Get synchronization progress state
     */
    async getSynchronizationProgressRaw(requestParameters: GetSynchronizationProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestSyncProgress>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling getSynchronizationProgress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/progress`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  Retrieves synchronization progress state for the specified upstream server.If there\'s no progress to report, this resource will return <pre><code> {\"discovering\":false,\"syncedRepos\":0,\"totalRepos\":0}</code></pre> If there are repositories in the process of synchronizing, but the precise number hasn\'t been discovered yet, this resource will return: <pre><code> {\"discovering\":true,\"syncedRepos\":3,\"totalRepos\":100}</code></pre> If there is progress to report and the total number of repositories is known, this resource will return: <pre> <code> {\"discovering\":false,\"syncedRepos\":242,\"totalRepos\":1071}</code> </pre>
     * Get synchronization progress state
     */
    async getSynchronizationProgress(requestParameters: GetSynchronizationProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestSyncProgress> {
        const response = await this.getSynchronizationProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves upstream server details by ID.
     * Get upstream server by ID
     */
    async getUpstreamServerRaw(requestParameters: GetUpstreamServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestUpstreamServer>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling getUpstreamServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves upstream server details by ID.
     * Get upstream server by ID
     */
    async getUpstreamServer(requestParameters: GetUpstreamServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestUpstreamServer> {
        const response = await this.getUpstreamServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a page of upstream servers
     * Get upstream servers
     */
    async listUpstreamServersRaw(requestParameters: ListUpstreamServersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUpstreamServers200Response>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a page of upstream servers
     * Get upstream servers
     */
    async listUpstreamServers(requestParameters: ListUpstreamServersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUpstreamServers200Response> {
        const response = await this.listUpstreamServersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify a disabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been disabled in the upstream server identified by <code> upstreamId</code>.
     * On disable of mirror addon
     */
    async onAddonDisabledRaw(requestParameters: OnAddonDisabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling onAddonDisabled.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/addon/disabled`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify a disabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been disabled in the upstream server identified by <code> upstreamId</code>.
     * On disable of mirror addon
     */
    async onAddonDisabled(requestParameters: OnAddonDisabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.onAddonDisabledRaw(requestParameters, initOverrides);
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify an enabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been enabled in the upstream server identified by <code>upstreamId</code>.
     * On enabled of mirror addon
     */
    async onAddonEnabledRaw(requestParameters: OnAddonEnabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling onAddonEnabled.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/addon/enabled`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify an enabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been enabled in the upstream server identified by <code>upstreamId</code>.
     * On enabled of mirror addon
     */
    async onAddonEnabled(requestParameters: OnAddonEnabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.onAddonEnabledRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the mirror mode for the specified upstream
     * Update mirror mode
     */
    async setMirrorModeRaw(requestParameters: SetMirrorModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling setMirrorMode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings/mode`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the mirror mode for the specified upstream
     * Update mirror mode
     */
    async setMirrorMode(requestParameters: SetMirrorModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setMirrorModeRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the settings for the specified upstream
     * Update upstream settings
     */
    async setMirrorSettingsRaw(requestParameters: SetMirrorSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestUpstreamSettings>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling setMirrorSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restUpstreamSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the settings for the specified upstream
     * Update upstream settings
     */
    async setMirrorSettings(requestParameters: SetMirrorSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestUpstreamSettings> {
        const response = await this.setMirrorSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Configures the mirror to mirror the provided project
     * Add project to be mirrored
     */
    async startMirroringProjectRaw(requestParameters: StartMirroringProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling startMirroringProject.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling startMirroringProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings/projects/{projectId}`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))).replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures the mirror to mirror the provided project
     * Add project to be mirrored
     */
    async startMirroringProject(requestParameters: StartMirroringProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startMirroringProjectRaw(requestParameters, initOverrides);
    }

    /**
     * Configures the mirror to mirror the provided projects
     * Add multiple projects to be mirrored
     */
    async startMirroringProjectsRaw(requestParameters: StartMirroringProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling startMirroringProjects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings/projects`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures the mirror to mirror the provided projects
     * Add multiple projects to be mirrored
     */
    async startMirroringProjects(requestParameters: StartMirroringProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startMirroringProjectsRaw(requestParameters, initOverrides);
    }

    /**
     * Configures the mirror to no longer mirror the provided project
     * Stop mirroring project
     */
    async stopMirroringProjectRaw(requestParameters: StopMirroringProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling stopMirroringProject.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling stopMirroringProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings/projects/{projectId}`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))).replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures the mirror to no longer mirror the provided project
     * Stop mirroring project
     */
    async stopMirroringProject(requestParameters: StopMirroringProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopMirroringProjectRaw(requestParameters, initOverrides);
    }

    /**
     * Configures the mirror to no longer mirror the provided projects
     * Stop mirroring projects
     */
    async stopMirroringProjectsRaw(requestParameters: StopMirroringProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling stopMirroringProjects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/settings/projects`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Configures the mirror to no longer mirror the provided projects
     * Stop mirroring projects
     */
    async stopMirroringProjects(requestParameters: StopMirroringProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopMirroringProjectsRaw(requestParameters, initOverrides);
    }

    /**
     * This method is no longer supported
     * Get upstream settings
     */
    async synchronizeRepositoryWithUpstreamRaw(requestParameters: SynchronizeRepositoryWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamRepoId === null || requestParameters.upstreamRepoId === undefined) {
            throw new runtime.RequiredError('upstreamRepoId','Required parameter requestParameters.upstreamRepoId was null or undefined when calling synchronizeRepositoryWithUpstream.');
        }

        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling synchronizeRepositoryWithUpstream.');
        }

        const queryParameters: any = {};

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/repos/{upstreamRepoId}/synchronization`.replace(`{${"upstreamRepoId"}}`, encodeURIComponent(String(requestParameters.upstreamRepoId))).replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method is no longer supported
     * Get upstream settings
     */
    async synchronizeRepositoryWithUpstream(requestParameters: SynchronizeRepositoryWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.synchronizeRepositoryWithUpstreamRaw(requestParameters, initOverrides);
    }

    /**
     * This method is no longer supported
     * Change upstream settings
     */
    async synchronizeWithUpstreamRaw(requestParameters: SynchronizeWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling synchronizeWithUpstream.');
        }

        const queryParameters: any = {};

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/synchronization`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method is no longer supported
     * Change upstream settings
     */
    async synchronizeWithUpstream(requestParameters: SynchronizeWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.synchronizeWithUpstreamRaw(requestParameters, initOverrides);
    }

}
