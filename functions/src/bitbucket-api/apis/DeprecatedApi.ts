/* tslint:disable */
/* eslint-disable */
/**
 * Bitbucket Server
 * This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).
 *
 * The version of the OpenAPI document: 8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAll401Response,
  GetBuildStatus200Response,
  GetLikers200Response,
  RestBranch,
  RestBuildStats,
  RestBuildStatus,
  RestPullRequestParticipant,
  UserPickerContext,
} from '../models';

interface AddBuildStatusRequest {
    commitId: string;
    restBuildStatus?: RestBuildStatus;
}

interface AddGroupToUserRequest {
    userPickerContext?: UserPickerContext;
}

interface AddUserToGroupRequest {
    userPickerContext?: UserPickerContext;
}

interface ApproveRequest {
    projectKey: string;
    pullRequestId: string;
    repositorySlug: string;
}

interface CountPullRequestTasksRequest {
    projectKey: string;
    pullRequestId: string;
    repositorySlug: string;
}

interface DeleteTaskRequest {
    taskId: string;
}

interface GetBuildStatusRequest {
    commitId: string;
    orderBy?: string;
    start?: number;
    limit?: number;
}

interface GetBuildStatusStatsRequest {
    commitId: string;
    includeUnique?: boolean;
}

interface GetDefaultBranch1Request {
    projectKey: string;
    repositorySlug: string;
}

interface GetLikersRequest {
    projectKey: string;
    commentId: number;
    commitId: string;
    repositorySlug: string;
    start?: number;
    limit?: number;
}

interface GetLikers1Request {
    projectKey: string;
    commentId: string;
    pullRequestId: string;
    repositorySlug: string;
    start?: number;
    limit?: number;
}

interface GetMultipleBuildStatusStatsRequest {
    requestBody?: Array<string>;
}

interface GetPullRequestTasksRequest {
    projectKey: string;
    pullRequestId: string;
    repositorySlug: string;
}

interface GetTaskRequest {
    taskId: string;
}

interface LikeRequest {
    projectKey: string;
    commentId: number;
    commitId: string;
    repositorySlug: string;
}

interface Like1Request {
    projectKey: string;
    commentId: string;
    pullRequestId: string;
    repositorySlug: string;
}

interface OnAddonDisabledRequest {
    upstreamId: string;
}

interface OnAddonEnabledRequest {
    upstreamId: string;
}

interface RemoveUserFromGroupRequest {
    userPickerContext?: UserPickerContext;
}

interface SetDefaultBranch1Request {
    projectKey: string;
    repositorySlug: string;
    restBranch?: RestBranch;
}

interface SynchronizeRepositoryWithUpstreamRequest {
    upstreamRepoId: string;
    upstreamId: string;
    level?: string;
}

interface SynchronizeWithUpstreamRequest {
    upstreamId: string;
    level?: string;
}

interface UnassignParticipantRole1Request {
    projectKey: string;
    pullRequestId: string;
    repositorySlug: string;
    username?: string;
}

interface UnlikeRequest {
    projectKey: string;
    commentId: number;
    commitId: string;
    repositorySlug: string;
}

interface Unlike1Request {
    projectKey: string;
    commentId: string;
    pullRequestId: string;
    repositorySlug: string;
}

interface UpdateTaskRequest {
    taskId: string;
}

interface WithdrawApprovalRequest {
    projectKey: string;
    pullRequestId: string;
    repositorySlug: string;
}

/**
 * 
 */
export class DeprecatedApi extends runtime.BaseAPI {

    /**
     * Associates a build status with a commit.The <code>state</code>, the <code>key</code> and the <code>url</code> fields are mandatory. The <code>name</code> and<code>description</code> fields are optional.All fields (mandatory or optional) are limited to 255 characters, except for the <code>url</code>,which is limited to 450 characters.Supported values for the <code>state</code> are <code>SUCCESSFUL</code>, <code>FAILED</code>and <code>INPROGRESS</code>.The authenticated user must have <strong>LICENSED</strong> permission or higher to call this resource.  <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
     * Create build status for commit
     */
    async addBuildStatusRaw(requestParameters: AddBuildStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling addBuildStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/build-status/latest/commits/{commitId}`.replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restBuildStatus,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Associates a build status with a commit.The <code>state</code>, the <code>key</code> and the <code>url</code> fields are mandatory. The <code>name</code> and<code>description</code> fields are optional.All fields (mandatory or optional) are limited to 255 characters, except for the <code>url</code>,which is limited to 450 characters.Supported values for the <code>state</code> are <code>SUCCESSFUL</code>, <code>FAILED</code>and <code>INPROGRESS</code>.The authenticated user must have <strong>LICENSED</strong> permission or higher to call this resource.  <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
     * Create build status for commit
     */
    async addBuildStatus(requestParameters: AddBuildStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addBuildStatusRaw(requestParameters, initOverrides);
    }

    /**
     * <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.  Add a user to a group. This is very similar to <code>groups/add-user</code>, but with the <em>context</em> and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear redundant, but it facilitates a specific UI component in Stash.  In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.  The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
     * Add user to group
     */
    async addGroupToUserRaw(requestParameters: AddGroupToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users/add-group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.userPickerContext,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.  Add a user to a group. This is very similar to <code>groups/add-user</code>, but with the <em>context</em> and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear redundant, but it facilitates a specific UI component in Stash.  In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.  The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
     * Add user to group
     */
    async addGroupToUser(requestParameters: AddGroupToUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addGroupToUserRaw(requestParameters, initOverrides);
    }

    /**
     * <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.  Add a user to a group.  In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.  The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
     * Add user to group
     */
    async addUserToGroupRaw(requestParameters: AddUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/groups/add-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.userPickerContext,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.  Add a user to a group.  In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.  The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
     * Add user to group
     */
    async addUserToGroup(requestParameters: AddUserToGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserToGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Approve a pull request as the current user. Implicitly adds the user as a participant if they are not already.   The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.   <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
     * Approve pull request
     */
    async approveRaw(requestParameters: ApproveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestPullRequestParticipant>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling approve.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling approve.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling approve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Approve a pull request as the current user. Implicitly adds the user as a participant if they are not already.   The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.   <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
     * Approve pull request
     */
    async approve(requestParameters: ApproveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestPullRequestParticipant> {
        const response = await this.approveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the total number of OPEN and RESOLVED tasks associated with a pull request.    <strong>Deprecated since 7.2</strong>. Tasks are now managed using Comments with BLOCKER severity. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments?count=true instead.
     * Get pull request task count
     */
    async countPullRequestTasksRaw(requestParameters: CountPullRequestTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling countPullRequestTasks.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling countPullRequestTasks.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling countPullRequestTasks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks/count`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the total number of OPEN and RESOLVED tasks associated with a pull request.    <strong>Deprecated since 7.2</strong>. Tasks are now managed using Comments with BLOCKER severity. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments?count=true instead.
     * Get pull request task count
     */
    async countPullRequestTasks(requestParameters: CountPullRequestTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.countPullRequestTasksRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new task.   <strong>Removed in 8.0</strong>. Tasks are now managed using Comments with severity BLOCKER. Call <code>POST /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments</code> instead,passing the attribute \'severity\' set to \'BLOCKER\'.
     * Create task
     */
    async createTaskRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new task.   <strong>Removed in 8.0</strong>. Tasks are now managed using Comments with severity BLOCKER. Call <code>POST /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments</code> instead,passing the attribute \'severity\' set to \'BLOCKER\'.
     * Create task
     */
    async createTask(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createTaskRaw(initOverrides);
    }

    /**
     * Delete a task.  <strong>Removed in 8.0</strong>. Tasks are now managed using Comments with BLOCKER severity. Call <code>DELETE /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}</code>instead. @deprecated since 7.2, changed to 404 in 8.0, remove in 9.0. Call DELETE /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} instead.  Note that only the task\'s creator, the context\'s author or an admin of the context\'s repository can delete a task. (For a pull request task, those are the task\'s creator, the pull request\'s author or an admin on the repository containing the pull request). Additionally a task cannot be deleted if it has already been resolved.
     * Delete task
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling deleteTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a task.  <strong>Removed in 8.0</strong>. Tasks are now managed using Comments with BLOCKER severity. Call <code>DELETE /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}</code>instead. @deprecated since 7.2, changed to 404 in 8.0, remove in 9.0. Call DELETE /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} instead.  Note that only the task\'s creator, the context\'s author or an admin of the context\'s repository can delete a task. (For a pull request task, those are the task\'s creator, the pull request\'s author or an admin on the repository containing the pull request). Additionally a task cannot be deleted if it has already been resolved.
     * Delete task
     */
    async deleteTask(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Gets build statuses associated with a commit.  <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
     * Get build statuses for commit
     */
    async getBuildStatusRaw(requestParameters: GetBuildStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBuildStatus200Response>> {
        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getBuildStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/build-status/latest/commits/{commitId}`.replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets build statuses associated with a commit.  <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
     * Get build statuses for commit
     */
    async getBuildStatus(requestParameters: GetBuildStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBuildStatus200Response> {
        const response = await this.getBuildStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets statistics regarding the builds associated with a commit
     * Get build status statistics for commit
     */
    async getBuildStatusStatsRaw(requestParameters: GetBuildStatusStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestBuildStats>> {
        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getBuildStatusStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeUnique !== undefined) {
            queryParameters['includeUnique'] = requestParameters.includeUnique;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/build-status/latest/commits/stats/{commitId}`.replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets statistics regarding the builds associated with a commit
     * Get build status statistics for commit
     */
    async getBuildStatusStats(requestParameters: GetBuildStatusStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestBuildStats> {
        const response = await this.getBuildStatusStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the repository\'s default branch, if it has been created. If the repository is empty, 204 No Content will be returned. For non-empty repositories, if the configured default branch has not yet been created a 404 Not Found will be returned.   This URL is deprecated. Callers should use <code>GET /projects/{key}/repos/{slug}/default-branch</code> instead, which allows retrieving the <i>configured</i> default branch even if the ref has not been created yet.   The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
     * Get default branch
     */
    async getDefaultBranch1Raw(requestParameters: GetDefaultBranch1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestBranch>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling getDefaultBranch1.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling getDefaultBranch1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/projects/{projectKey}/repos/{repositorySlug}/branches/default`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the repository\'s default branch, if it has been created. If the repository is empty, 204 No Content will be returned. For non-empty repositories, if the configured default branch has not yet been created a 404 Not Found will be returned.   This URL is deprecated. Callers should use <code>GET /projects/{key}/repos/{slug}/default-branch</code> instead, which allows retrieving the <i>configured</i> default branch even if the ref has not been created yet.   The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
     * Get default branch
     */
    async getDefaultBranch1(requestParameters: GetDefaultBranch1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestBranch> {
        const response = await this.getDefaultBranch1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a page of users who liked a commit comment in the specified repository, identified by <code>commitId</code> and <code>commentId</code>.  The authenticated user must have the **REPO_READ** (or higher) permission for the specified repository to access this resource.  <strong>Deprecated in 8.0 to be removed in 9.0.</strong>
     * Get comment likes
     */
    async getLikersRaw(requestParameters: GetLikersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLikers200Response>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling getLikers.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling getLikers.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getLikers.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling getLikers.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}/likes`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a page of users who liked a commit comment in the specified repository, identified by <code>commitId</code> and <code>commentId</code>.  The authenticated user must have the **REPO_READ** (or higher) permission for the specified repository to access this resource.  <strong>Deprecated in 8.0 to be removed in 9.0.</strong>
     * Get comment likes
     */
    async getLikers(requestParameters: GetLikersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLikers200Response> {
        const response = await this.getLikersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a page of users who liked a pull request comment in the specified repository, identified by <code>pullRequestId</code> and <code>commentId</code>.   The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  **Deprecated in 8.0 to be removed in 9.0.**
     * Get pull request comment likes
     */
    async getLikers1Raw(requestParameters: GetLikers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLikers200Response>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling getLikers1.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling getLikers1.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling getLikers1.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling getLikers1.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/likes`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a page of users who liked a pull request comment in the specified repository, identified by <code>pullRequestId</code> and <code>commentId</code>.   The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  **Deprecated in 8.0 to be removed in 9.0.**
     * Get pull request comment likes
     */
    async getLikers1(requestParameters: GetLikers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLikers200Response> {
        const response = await this.getLikers1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Produces a list of the build statistics for multiple commits. Commits <em>without any builds associated with them</em> will not be returned.<br> For example if the commit <code>e00cf62997a027bbf785614a93e2e55bb331d268</code> does not have any build statuses associated with it, it will not be present in the response.
     * Get build status for multiple commits
     */
    async getMultipleBuildStatusStatsRaw(requestParameters: GetMultipleBuildStatusStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/build-status/latest/commits/stats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Produces a list of the build statistics for multiple commits. Commits <em>without any builds associated with them</em> will not be returned.<br> For example if the commit <code>e00cf62997a027bbf785614a93e2e55bb331d268</code> does not have any build statuses associated with it, it will not be present in the response.
     * Get build status for multiple commits
     */
    async getMultipleBuildStatusStats(requestParameters: GetMultipleBuildStatusStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getMultipleBuildStatusStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the tasks associated with a pull request.   **Removed in 8.0**. Tasks are now managed using Comments with BLOCKER severity. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments instead   **Deprecated since 7.2, changed to 404 in 8.0, remove in 9.0.** Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments instead
     * Get pull request tasks
     */
    async getPullRequestTasksRaw(requestParameters: GetPullRequestTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling getPullRequestTasks.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling getPullRequestTasks.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling getPullRequestTasks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the tasks associated with a pull request.   **Removed in 8.0**. Tasks are now managed using Comments with BLOCKER severity. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments instead   **Deprecated since 7.2, changed to 404 in 8.0, remove in 9.0.** Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments instead
     * Get pull request tasks
     */
    async getPullRequestTasks(requestParameters: GetPullRequestTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPullRequestTasksRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve an existing task.  <strong>Removed in 8.0</strong>. Tasks are now managed using Comments with BLOCKER severity. Call <code>GET /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} </code>instead. @deprecated since 7.2, changed to 404 in 8.0, remove in 9.0. Call GET /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} instead.
     * Get task
     */
    async getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve an existing task.  <strong>Removed in 8.0</strong>. Tasks are now managed using Comments with BLOCKER severity. Call <code>GET /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} </code>instead. @deprecated since 7.2, changed to 404 in 8.0, remove in 9.0. Call GET /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} instead.
     * Get task
     */
    async getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Like a commit comment in the specified repository, identified by <code>commitId</code> and <code>commentId</code>.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  <strong>Deprecated in 8.0 to be removed in 9.0.</strong> Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Like a commit comment
     */
    async likeRaw(requestParameters: LikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling like.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling like.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling like.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling like.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}/likes`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Like a commit comment in the specified repository, identified by <code>commitId</code> and <code>commentId</code>.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  <strong>Deprecated in 8.0 to be removed in 9.0.</strong> Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Like a commit comment
     */
    async like(requestParameters: LikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.likeRaw(requestParameters, initOverrides);
    }

    /**
     * Like a pull request comment in the specified repository, identified by <code>pullRequestId</code> and <code>commentId</code>. The like will be recorded against the requesting user.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  **Deprecated in 8.0 to be removed in 9.0.** Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Like a pull request comment
     */
    async like1Raw(requestParameters: Like1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling like1.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling like1.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling like1.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling like1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/likes`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Like a pull request comment in the specified repository, identified by <code>pullRequestId</code> and <code>commentId</code>. The like will be recorded against the requesting user.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  **Deprecated in 8.0 to be removed in 9.0.** Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Like a pull request comment
     */
    async like1(requestParameters: Like1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.like1Raw(requestParameters, initOverrides);
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify a disabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been disabled in the upstream server identified by <code> upstreamId</code>.
     * On disable of mirror addon
     */
    async onAddonDisabledRaw(requestParameters: OnAddonDisabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling onAddonDisabled.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/addon/disabled`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify a disabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been disabled in the upstream server identified by <code> upstreamId</code>.
     * On disable of mirror addon
     */
    async onAddonDisabled(requestParameters: OnAddonDisabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.onAddonDisabledRaw(requestParameters, initOverrides);
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify an enabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been enabled in the upstream server identified by <code>upstreamId</code>.
     * On enabled of mirror addon
     */
    async onAddonEnabledRaw(requestParameters: OnAddonEnabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling onAddonEnabled.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/addon/enabled`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This REST endpoint is retained for backwards compatibility only. It is a no-op. Starting from 4.6.0, mirrors no longer specify an enabled lifecycle callback in their addon descriptor. Prior to 4.6.0, this was the callback method that was called when the mirroring atlassian-connect add-on has been enabled in the upstream server identified by <code>upstreamId</code>.
     * On enabled of mirror addon
     */
    async onAddonEnabled(requestParameters: OnAddonEnabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.onAddonEnabledRaw(requestParameters, initOverrides);
    }

    /**
     * <strong>Deprecated since 2.10</strong>. Use /rest/users/remove-groups instead.  Remove a user from a group.  The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.  In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.
     * Remove user from group
     */
    async removeUserFromGroupRaw(requestParameters: RemoveUserFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/groups/remove-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.userPickerContext,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <strong>Deprecated since 2.10</strong>. Use /rest/users/remove-groups instead.  Remove a user from a group.  The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.  In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.
     * Remove user from group
     */
    async removeUserFromGroup(requestParameters: RemoveUserFromGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserFromGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Update the default branch of a repository.   This URL is deprecated. Callers should use <code>PUT /projects/{key}/repos/{slug}/default-branch</code> instead.   The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
     * Update default branch
     */
    async setDefaultBranch1Raw(requestParameters: SetDefaultBranch1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling setDefaultBranch1.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling setDefaultBranch1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/projects/{projectKey}/repos/{repositorySlug}/branches/default`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restBranch,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the default branch of a repository.   This URL is deprecated. Callers should use <code>PUT /projects/{key}/repos/{slug}/default-branch</code> instead.   The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
     * Update default branch
     */
    async setDefaultBranch1(requestParameters: SetDefaultBranch1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setDefaultBranch1Raw(requestParameters, initOverrides);
    }

    /**
     * This method is no longer supported
     * Get upstream settings
     */
    async synchronizeRepositoryWithUpstreamRaw(requestParameters: SynchronizeRepositoryWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamRepoId === null || requestParameters.upstreamRepoId === undefined) {
            throw new runtime.RequiredError('upstreamRepoId','Required parameter requestParameters.upstreamRepoId was null or undefined when calling synchronizeRepositoryWithUpstream.');
        }

        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling synchronizeRepositoryWithUpstream.');
        }

        const queryParameters: any = {};

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/repos/{upstreamRepoId}/synchronization`.replace(`{${"upstreamRepoId"}}`, encodeURIComponent(String(requestParameters.upstreamRepoId))).replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method is no longer supported
     * Get upstream settings
     */
    async synchronizeRepositoryWithUpstream(requestParameters: SynchronizeRepositoryWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.synchronizeRepositoryWithUpstreamRaw(requestParameters, initOverrides);
    }

    /**
     * This method is no longer supported
     * Change upstream settings
     */
    async synchronizeWithUpstreamRaw(requestParameters: SynchronizeWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upstreamId === null || requestParameters.upstreamId === undefined) {
            throw new runtime.RequiredError('upstreamId','Required parameter requestParameters.upstreamId was null or undefined when calling synchronizeWithUpstream.');
        }

        const queryParameters: any = {};

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mirroring/latest/upstreamServers/{upstreamId}/synchronization`.replace(`{${"upstreamId"}}`, encodeURIComponent(String(requestParameters.upstreamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method is no longer supported
     * Change upstream settings
     */
    async synchronizeWithUpstream(requestParameters: SynchronizeWithUpstreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.synchronizeWithUpstreamRaw(requestParameters, initOverrides);
    }

    /**
     * Unassigns a participant from the REVIEWER role they may have been given in a pull request.   If the participant has no explicit role this method has no effect.   Afterwards, the user will still remain a participant in the pull request but their role will be reduced to PARTICIPANT. This is because once made a participant of a pull request, a user will forever remain a participant. Only their role may be altered.   The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.   <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead.
     * Unassign pull request participant
     */
    async unassignParticipantRole1Raw(requestParameters: UnassignParticipantRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling unassignParticipantRole1.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling unassignParticipantRole1.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling unassignParticipantRole1.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unassigns a participant from the REVIEWER role they may have been given in a pull request.   If the participant has no explicit role this method has no effect.   Afterwards, the user will still remain a participant in the pull request but their role will be reduced to PARTICIPANT. This is because once made a participant of a pull request, a user will forever remain a participant. Only their role may be altered.   The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.   <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead.
     * Unassign pull request participant
     */
    async unassignParticipantRole1(requestParameters: UnassignParticipantRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unassignParticipantRole1Raw(requestParameters, initOverrides);
    }

    /**
     * Unlike a commit comment in the specified repository, identified by <code>commitId</code> and <code>commentId</code>.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  <strong>Deprecated in 8.0 to be removed in 9.0.</strong> Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Unlike a commit comment
     */
    async unlikeRaw(requestParameters: UnlikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling unlike.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling unlike.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling unlike.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling unlike.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}/likes`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlike a commit comment in the specified repository, identified by <code>commitId</code> and <code>commentId</code>.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  <strong>Deprecated in 8.0 to be removed in 9.0.</strong> Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Unlike a commit comment
     */
    async unlike(requestParameters: UnlikeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlikeRaw(requestParameters, initOverrides);
    }

    /**
     * Unlike a pull request comment in the specified repository, identified by <code>pullRequestId</code> and <code>commentId</code>.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  **Deprecated in 8.0 to be removed in 9.0.** Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Unlike a pull request comment
     */
    async unlike1Raw(requestParameters: Unlike1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling unlike1.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling unlike1.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling unlike1.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling unlike1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/likes`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlike a pull request comment in the specified repository, identified by <code>pullRequestId</code> and <code>commentId</code>.  The authenticated user must have the <strong>REPO_READ</strong> (or higher) permission for the specified repository to access this resource.  **Deprecated in 8.0 to be removed in 9.0.** Likes have been replaced with reactions. For backwards compatibility, the <pre>thumbsup</pre> reaction is treated as a like.
     * Unlike a pull request comment
     */
    async unlike1(requestParameters: Unlike1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlike1Raw(requestParameters, initOverrides);
    }

    /**
     * Update an existing task.     <strong>Removed in 8.0</strong>.  Tasks are now managed using Comments with BLOCKER severity.  Call <code>PUT /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} </code> instead.  To resolve a task, pass the attribute \'state\' set to \'RESOLVED\'.  @deprecated since 7.2, changed to 404 in 8.0, remove in 9.0. Call <code>PUT  /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} </code> instead.    As of Stash 3.3, only the state and text of a task can be updated.    Updating the state of a task is allowed for any user having <em>READ</em> access to the repository.  However only the task\'s creator, the context\'s author or an admin of the context\'s repository can update the task\'s text. (For a pull request task, those are the task\'s creator, the pull request\'s author or an admin on the repository containing the pull request). Additionally the task\'s text cannot be updated if it has been resolved.
     * Update task
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing task.     <strong>Removed in 8.0</strong>.  Tasks are now managed using Comments with BLOCKER severity.  Call <code>PUT /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} </code> instead.  To resolve a task, pass the attribute \'state\' set to \'RESOLVED\'.  @deprecated since 7.2, changed to 404 in 8.0, remove in 9.0. Call <code>PUT  /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId} </code> instead.    As of Stash 3.3, only the state and text of a task can be updated.    Updating the state of a task is allowed for any user having <em>READ</em> access to the repository.  However only the task\'s creator, the context\'s author or an admin of the context\'s repository can update the task\'s text. (For a pull request task, those are the task\'s creator, the pull request\'s author or an admin on the repository containing the pull request). Additionally the task\'s text cannot be updated if it has been resolved.
     * Update task
     */
    async updateTask(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Remove approval from a pull request as the current user. This does not remove the user as a participant.   The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.   <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
     * Unapprove pull request
     */
    async withdrawApprovalRaw(requestParameters: WithdrawApprovalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestPullRequestParticipant>> {
        if (requestParameters.projectKey === null || requestParameters.projectKey === undefined) {
            throw new runtime.RequiredError('projectKey','Required parameter requestParameters.projectKey was null or undefined when calling withdrawApproval.');
        }

        if (requestParameters.pullRequestId === null || requestParameters.pullRequestId === undefined) {
            throw new runtime.RequiredError('pullRequestId','Required parameter requestParameters.pullRequestId was null or undefined when calling withdrawApproval.');
        }

        if (requestParameters.repositorySlug === null || requestParameters.repositorySlug === undefined) {
            throw new runtime.RequiredError('repositorySlug','Required parameter requestParameters.repositorySlug was null or undefined when calling withdrawApproval.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters.projectKey))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters.pullRequestId))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters.repositorySlug))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove approval from a pull request as the current user. This does not remove the user as a participant.   The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.   <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
     * Unapprove pull request
     */
    async withdrawApproval(requestParameters: WithdrawApprovalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestPullRequestParticipant> {
        const response = await this.withdrawApprovalRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
